public final class misk/Action {
	public fun <init> (Ljava/lang/String;Lkotlin/reflect/KFunction;Ljava/util/List;Lokhttp3/MediaType;Ljava/util/List;Lkotlin/reflect/KType;Lmisk/web/DispatchMechanism;)V
	public final fun component1 ()Ljava/lang/String;
	public final fun component2 ()Lkotlin/reflect/KFunction;
	public final fun component3 ()Ljava/util/List;
	public final fun component4 ()Lokhttp3/MediaType;
	public final fun component5 ()Ljava/util/List;
	public final fun component6 ()Lkotlin/reflect/KType;
	public final fun component7 ()Lmisk/web/DispatchMechanism;
	public final fun copy (Ljava/lang/String;Lkotlin/reflect/KFunction;Ljava/util/List;Lokhttp3/MediaType;Ljava/util/List;Lkotlin/reflect/KType;Lmisk/web/DispatchMechanism;)Lmisk/Action;
	public static synthetic fun copy$default (Lmisk/Action;Ljava/lang/String;Lkotlin/reflect/KFunction;Ljava/util/List;Lokhttp3/MediaType;Ljava/util/List;Lkotlin/reflect/KType;Lmisk/web/DispatchMechanism;ILjava/lang/Object;)Lmisk/Action;
	public fun equals (Ljava/lang/Object;)Z
	public final fun getAcceptedMediaRanges ()Ljava/util/List;
	public final fun getDispatchMechanism ()Lmisk/web/DispatchMechanism;
	public final fun getFunction ()Lkotlin/reflect/KFunction;
	public final fun getName ()Ljava/lang/String;
	public final fun getParameterTypes ()Ljava/util/List;
	public final fun getParameters ()Ljava/util/List;
	public final fun getRequestType ()Lkotlin/reflect/KType;
	public final fun getResponseContentType ()Lokhttp3/MediaType;
	public final fun getReturnType ()Lkotlin/reflect/KType;
	public final fun hasReturnValue ()Z
	public fun hashCode ()I
	public fun toString ()Ljava/lang/String;
}

public abstract interface class misk/ApplicationInterceptor {
	public abstract fun intercept (Lmisk/Chain;)Ljava/lang/Object;
}

public abstract interface class misk/ApplicationInterceptor$Factory {
	public abstract fun create (Lmisk/Action;)Lmisk/ApplicationInterceptor;
}

public abstract interface class misk/Chain {
	public abstract fun getAction ()Lmisk/web/actions/WebAction;
	public abstract fun getArgs ()Ljava/util/List;
	public abstract fun getFunction ()Lkotlin/reflect/KFunction;
	public abstract fun getHttpCall ()Lmisk/web/HttpCall;
	public abstract fun proceed (Ljava/util/List;)Ljava/lang/Object;
}

public final class misk/MiskCaller {
	public fun <init> ()V
	public fun <init> (Ljava/lang/String;)V
	public fun <init> (Ljava/lang/String;Ljava/lang/String;)V
	public fun <init> (Ljava/lang/String;Ljava/lang/String;Ljava/util/Set;)V
	public synthetic fun <init> (Ljava/lang/String;Ljava/lang/String;Ljava/util/Set;ILkotlin/jvm/internal/DefaultConstructorMarker;)V
	public final fun component1 ()Ljava/lang/String;
	public final fun component2 ()Ljava/lang/String;
	public final fun component3 ()Ljava/util/Set;
	public final fun copy (Ljava/lang/String;Ljava/lang/String;Ljava/util/Set;)Lmisk/MiskCaller;
	public static synthetic fun copy$default (Lmisk/MiskCaller;Ljava/lang/String;Ljava/lang/String;Ljava/util/Set;ILjava/lang/Object;)Lmisk/MiskCaller;
	public fun equals (Ljava/lang/Object;)Z
	public final fun getCapabilities ()Ljava/util/Set;
	public final fun getPrincipal ()Ljava/lang/String;
	public final fun getService ()Ljava/lang/String;
	public final fun getUser ()Ljava/lang/String;
	public final fun hasCapability (Ljava/util/Set;)Z
	public fun hashCode ()I
	public final fun isAllowed (Ljava/util/Set;Ljava/util/Set;)Z
	public final fun isService (Ljava/util/Set;)Z
	public fun toString ()Ljava/lang/String;
}

public abstract interface class misk/client/CallFactoryWrapper {
	public abstract fun wrap (Lmisk/client/ClientAction;Lokhttp3/Call$Factory;)Lokhttp3/Call$Factory;
}

public final class misk/client/ClientAction {
	public fun <init> (Ljava/lang/String;Lkotlin/reflect/KFunction;)V
	public fun <init> (Ljava/lang/String;Lkotlin/reflect/KFunction;Ljava/util/List;Lkotlin/reflect/KType;)V
	public final fun component1 ()Ljava/lang/String;
	public final fun component2 ()Lkotlin/reflect/KFunction;
	public final fun component3 ()Ljava/util/List;
	public final fun component4 ()Lkotlin/reflect/KType;
	public final fun copy (Ljava/lang/String;Lkotlin/reflect/KFunction;Ljava/util/List;Lkotlin/reflect/KType;)Lmisk/client/ClientAction;
	public static synthetic fun copy$default (Lmisk/client/ClientAction;Ljava/lang/String;Lkotlin/reflect/KFunction;Ljava/util/List;Lkotlin/reflect/KType;ILjava/lang/Object;)Lmisk/client/ClientAction;
	public fun equals (Ljava/lang/Object;)Z
	public final fun getFunction ()Lkotlin/reflect/KFunction;
	public final fun getName ()Ljava/lang/String;
	public final fun getParameterTypes ()Ljava/util/List;
	public final fun getReturnType ()Lkotlin/reflect/KType;
	public fun hashCode ()I
	public fun toString ()Ljava/lang/String;
}

public abstract interface class misk/client/ClientApplicationInterceptorFactory {
	public abstract fun create (Lmisk/client/ClientAction;)Lokhttp3/Interceptor;
}

public abstract interface class misk/client/ClientNetworkChain {
	public abstract fun getAction ()Lmisk/client/ClientAction;
	public abstract fun getRequest ()Lokhttp3/Request;
	public abstract fun proceed (Lokhttp3/Request;)Lokhttp3/Response;
}

public abstract interface class misk/client/ClientNetworkInterceptor {
	public abstract fun intercept (Lmisk/client/ClientNetworkChain;)Lokhttp3/Response;
}

public abstract interface class misk/client/ClientNetworkInterceptor$Factory {
	public abstract fun create (Lmisk/client/ClientAction;)Lmisk/client/ClientNetworkInterceptor;
}

public final class misk/client/RealClientNetworkChain : misk/client/ClientNetworkChain {
	public fun <init> (Lokhttp3/Interceptor$Chain;Lmisk/client/ClientAction;)V
	public fun getAction ()Lmisk/client/ClientAction;
	public fun getRequest ()Lokhttp3/Request;
	public fun proceed (Lokhttp3/Request;)Lokhttp3/Response;
}

public abstract interface class misk/scope/ActionScopedProvider {
	public abstract fun get ()Ljava/lang/Object;
}

public abstract interface class misk/scope/Scope : java/lang/AutoCloseable {
	public abstract fun enter (Ljava/util/Map;)Lmisk/scope/Scope;
	public abstract fun get (Lkotlin/reflect/KType;)Ljava/lang/Object;
	public abstract fun inScope ()Z
}

public abstract interface annotation class misk/web/AvailableWhenDegraded : java/lang/annotation/Annotation {
}

public abstract interface annotation class misk/web/ConnectWebSocket : java/lang/annotation/Annotation {
	public abstract fun pathPattern ()Ljava/lang/String;
}

public abstract interface annotation class misk/web/Delete : java/lang/annotation/Annotation {
	public abstract fun pathPattern ()Ljava/lang/String;
}

public abstract interface annotation class misk/web/Description : java/lang/annotation/Annotation {
	public abstract fun text ()Ljava/lang/String;
}

public final class misk/web/DispatchMechanism : java/lang/Enum {
	public static final field DELETE Lmisk/web/DispatchMechanism;
	public static final field GET Lmisk/web/DispatchMechanism;
	public static final field GRPC Lmisk/web/DispatchMechanism;
	public static final field PATCH Lmisk/web/DispatchMechanism;
	public static final field POST Lmisk/web/DispatchMechanism;
	public static final field PUT Lmisk/web/DispatchMechanism;
	public static final field WEBSOCKET Lmisk/web/DispatchMechanism;
	public final fun getMethod ()Ljava/lang/String;
	public static fun valueOf (Ljava/lang/String;)Lmisk/web/DispatchMechanism;
	public static fun values ()[Lmisk/web/DispatchMechanism;
}

public abstract interface annotation class misk/web/FormField : java/lang/annotation/Annotation {
	public abstract fun name ()Ljava/lang/String;
}

public abstract interface annotation class misk/web/FormValue : java/lang/annotation/Annotation {
}

public abstract interface annotation class misk/web/Get : java/lang/annotation/Annotation {
	public abstract fun pathPattern ()Ljava/lang/String;
}

public abstract interface annotation class misk/web/Grpc : java/lang/annotation/Annotation {
	public abstract fun pathPattern ()Ljava/lang/String;
}

public abstract interface class misk/web/HttpCall {
	public abstract fun accepts ()Ljava/util/List;
	public abstract fun addResponseHeaders (Lokhttp3/Headers;)V
	public abstract fun asOkHttpRequest ()Lokhttp3/Request;
	public abstract fun computeRequestHeader (Ljava/lang/String;Lkotlin/jvm/functions/Function1;)V
	public abstract fun contentType ()Lokhttp3/MediaType;
	public abstract fun getCookies ()Ljava/util/List;
	public abstract fun getDispatchMechanism ()Lmisk/web/DispatchMechanism;
	public abstract fun getLinkLayerLocalAddress ()Lmisk/web/SocketAddress;
	public abstract fun getNetworkStatusCode ()I
	public abstract fun getRequestHeaders ()Lokhttp3/Headers;
	public abstract fun getResponseHeaders ()Lokhttp3/Headers;
	public abstract fun getStatusCode ()I
	public abstract fun getUrl ()Lokhttp3/HttpUrl;
	public abstract fun initWebSocketListener (Lmisk/web/actions/WebSocketListener;)V
	public abstract fun putRequestBody (Lokio/BufferedSource;)V
	public abstract fun putResponseBody (Lokio/BufferedSink;)V
	public abstract fun putWebSocket (Lmisk/web/actions/WebSocket;)V
	public abstract fun requireTrailers ()V
	public abstract fun setCookies (Ljava/util/List;)V
	public abstract fun setRequestHeaders (Lokhttp3/Headers;)V
	public abstract fun setResponseHeader (Ljava/lang/String;Ljava/lang/String;)V
	public abstract fun setResponseTrailer (Ljava/lang/String;Ljava/lang/String;)V
	public abstract fun setStatusCode (I)V
	public abstract fun setStatusCodes (II)V
	public abstract fun takeRequestBody ()Lokio/BufferedSource;
	public abstract fun takeResponseBody ()Lokio/BufferedSink;
	public abstract fun takeWebSocket ()Lmisk/web/actions/WebSocket;
}

public final class misk/web/HttpCall$DefaultImpls {
	public static fun accepts (Lmisk/web/HttpCall;)Ljava/util/List;
	public static fun asOkHttpRequest (Lmisk/web/HttpCall;)Lokhttp3/Request;
	public static fun computeRequestHeader (Lmisk/web/HttpCall;Ljava/lang/String;Lkotlin/jvm/functions/Function1;)V
	public static fun contentType (Lmisk/web/HttpCall;)Lokhttp3/MediaType;
}

public abstract interface class misk/web/NetworkChain {
	public abstract fun getAction ()Lmisk/Action;
	public abstract fun getHttpCall ()Lmisk/web/HttpCall;
	public abstract fun getWebAction ()Lmisk/web/actions/WebAction;
	public abstract fun proceed (Lmisk/web/HttpCall;)V
}

public abstract interface class misk/web/NetworkInterceptor {
	public abstract fun intercept (Lmisk/web/NetworkChain;)V
}

public abstract interface class misk/web/NetworkInterceptor$Factory {
	public abstract fun create (Lmisk/Action;)Lmisk/web/NetworkInterceptor;
}

public abstract interface annotation class misk/web/Patch : java/lang/annotation/Annotation {
	public abstract fun pathPattern ()Ljava/lang/String;
}

public abstract interface annotation class misk/web/PathParam : java/lang/annotation/Annotation {
	public abstract fun value ()Ljava/lang/String;
}

public final class misk/web/PathPattern : java/lang/Comparable {
	public static final field Companion Lmisk/web/PathPattern$Companion;
	public fun <init> (Ljava/lang/String;Ljava/util/regex/Pattern;Ljava/util/List;IIZ)V
	public synthetic fun compareTo (Ljava/lang/Object;)I
	public fun compareTo (Lmisk/web/PathPattern;)I
	public fun equals (Ljava/lang/Object;)Z
	public final fun getMatchesWildcardPath ()Z
	public final fun getNumRegexVariables ()I
	public final fun getNumSegments ()I
	public final fun getPattern ()Ljava/lang/String;
	public final fun getRegex ()Ljava/util/regex/Pattern;
	public final fun getVariableNames ()Ljava/util/List;
	public fun hashCode ()I
	public final fun matcher (Lokhttp3/HttpUrl;)Ljava/util/regex/Matcher;
	public fun toString ()Ljava/lang/String;
}

public final class misk/web/PathPattern$Companion {
	public final fun parse (Ljava/lang/String;)Lmisk/web/PathPattern;
}

public abstract interface annotation class misk/web/Post : java/lang/annotation/Annotation {
	public abstract fun pathPattern ()Ljava/lang/String;
}

public abstract interface annotation class misk/web/Put : java/lang/annotation/Annotation {
	public abstract fun pathPattern ()Ljava/lang/String;
}

public abstract interface annotation class misk/web/QueryParam : java/lang/annotation/Annotation {
	public abstract fun value ()Ljava/lang/String;
}

public abstract interface annotation class misk/web/RequestBody : java/lang/annotation/Annotation {
}

public abstract interface annotation class misk/web/RequestContentType : java/lang/annotation/Annotation {
	public abstract fun value ()[Ljava/lang/String;
}

public abstract interface annotation class misk/web/RequestHeaders : java/lang/annotation/Annotation {
}

public final class misk/web/Response {
	public fun <init> (Ljava/lang/Object;)V
	public fun <init> (Ljava/lang/Object;Lokhttp3/Headers;)V
	public fun <init> (Ljava/lang/Object;Lokhttp3/Headers;I)V
	public fun <init> (Ljava/lang/Object;Lokhttp3/Headers;ILkotlin/jvm/functions/Function0;)V
	public synthetic fun <init> (Ljava/lang/Object;Lokhttp3/Headers;ILkotlin/jvm/functions/Function0;ILkotlin/jvm/internal/DefaultConstructorMarker;)V
	public final fun component1 ()Ljava/lang/Object;
	public final fun component2 ()Lokhttp3/Headers;
	public final fun component3 ()I
	public final fun component4 ()Lkotlin/jvm/functions/Function0;
	public final fun copy (Ljava/lang/Object;Lokhttp3/Headers;ILkotlin/jvm/functions/Function0;)Lmisk/web/Response;
	public static synthetic fun copy$default (Lmisk/web/Response;Ljava/lang/Object;Lokhttp3/Headers;ILkotlin/jvm/functions/Function0;ILjava/lang/Object;)Lmisk/web/Response;
	public fun equals (Ljava/lang/Object;)Z
	public final fun getBody ()Ljava/lang/Object;
	public final fun getHeaders ()Lokhttp3/Headers;
	public final fun getStatusCode ()I
	public final fun getTrailers ()Lkotlin/jvm/functions/Function0;
	public fun hashCode ()I
	public fun toString ()Ljava/lang/String;
}

public abstract interface class misk/web/ResponseBody {
	public abstract fun writeTo (Lokio/BufferedSink;)V
}

public abstract interface annotation class misk/web/ResponseContentType : java/lang/annotation/Annotation {
	public abstract fun value ()[Ljava/lang/String;
}

public final class misk/web/ResponseExtensionsKt {
	public static final fun readUtf8 (Lmisk/web/Response;)Ljava/lang/String;
	public static final fun toMisk (Lokhttp3/Response;)Lmisk/web/Response;
	public static final fun toResponseBody (Ljava/lang/String;)Lmisk/web/ResponseBody;
	public static final fun toResponseBody (Lokio/ByteString;)Lmisk/web/ResponseBody;
}

public abstract class misk/web/SocketAddress {
}

public final class misk/web/SocketAddress$Network : misk/web/SocketAddress {
	public fun <init> (Ljava/lang/String;I)V
	public final fun getIpAddress ()Ljava/lang/String;
	public final fun getPort ()I
}

public final class misk/web/SocketAddress$Unix : misk/web/SocketAddress {
	public fun <init> (Ljava/lang/String;)V
	public final fun getPath ()Ljava/lang/String;
}

public abstract interface class misk/web/actions/WebAction {
}

public abstract interface class misk/web/actions/WebSocket {
	public abstract fun cancel ()V
	public abstract fun close (ILjava/lang/String;)Z
	public abstract fun queueSize ()J
	public abstract fun send (Ljava/lang/String;)Z
	public abstract fun send (Lokio/ByteString;)Z
}

public class misk/web/actions/WebSocketListener {
	public fun <init> ()V
	public fun onClosed (Lmisk/web/actions/WebSocket;ILjava/lang/String;)V
	public fun onClosing (Lmisk/web/actions/WebSocket;ILjava/lang/String;)V
	public fun onFailure (Lmisk/web/actions/WebSocket;Ljava/lang/Throwable;)V
	public fun onMessage (Lmisk/web/actions/WebSocket;Ljava/lang/String;)V
	public fun onMessage (Lmisk/web/actions/WebSocket;Lokio/ByteString;)V
}

public final class misk/web/mediatype/MediaRange : java/lang/Comparable {
	public static final field Companion Lmisk/web/mediatype/MediaRange$Companion;
	public static final field WILDCARD Ljava/lang/String;
	public fun <init> (Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;)V
	public fun <init> (Ljava/lang/String;Ljava/lang/String;Ljava/nio/charset/Charset;DLjava/lang/String;)V
	public fun <init> (Ljava/lang/String;Ljava/lang/String;Ljava/nio/charset/Charset;DLjava/util/Map;Ljava/lang/String;)V
	public fun <init> (Ljava/lang/String;Ljava/lang/String;Ljava/nio/charset/Charset;DLjava/util/Map;Ljava/util/Map;Ljava/lang/String;)V
	public synthetic fun <init> (Ljava/lang/String;Ljava/lang/String;Ljava/nio/charset/Charset;DLjava/util/Map;Ljava/util/Map;Ljava/lang/String;ILkotlin/jvm/internal/DefaultConstructorMarker;)V
	public fun <init> (Ljava/lang/String;Ljava/lang/String;Ljava/nio/charset/Charset;Ljava/lang/String;)V
	public synthetic fun compareTo (Ljava/lang/Object;)I
	public fun compareTo (Lmisk/web/mediatype/MediaRange;)I
	public final fun component1 ()Ljava/lang/String;
	public final fun component2 ()Ljava/lang/String;
	public final fun component3 ()Ljava/nio/charset/Charset;
	public final fun component4 ()D
	public final fun component5 ()Ljava/util/Map;
	public final fun component6 ()Ljava/util/Map;
	public final fun copy (Ljava/lang/String;Ljava/lang/String;Ljava/nio/charset/Charset;DLjava/util/Map;Ljava/util/Map;Ljava/lang/String;)Lmisk/web/mediatype/MediaRange;
	public static synthetic fun copy$default (Lmisk/web/mediatype/MediaRange;Ljava/lang/String;Ljava/lang/String;Ljava/nio/charset/Charset;DLjava/util/Map;Ljava/util/Map;Ljava/lang/String;ILjava/lang/Object;)Lmisk/web/mediatype/MediaRange;
	public fun equals (Ljava/lang/Object;)Z
	public final fun getCharset ()Ljava/nio/charset/Charset;
	public final fun getExtensions ()Ljava/util/Map;
	public final fun getParameters ()Ljava/util/Map;
	public final fun getQualityFactor ()D
	public final fun getSubtype ()Ljava/lang/String;
	public final fun getType ()Ljava/lang/String;
	public fun hashCode ()I
	public final fun matcher (Lokhttp3/MediaType;)Lmisk/web/mediatype/MediaRange$Matcher;
	public fun toString ()Ljava/lang/String;
}

public final class misk/web/mediatype/MediaRange$Companion {
	public final fun getALL_MEDIA ()Lmisk/web/mediatype/MediaRange;
	public final fun parse (Ljava/lang/String;)Lmisk/web/mediatype/MediaRange;
	public final fun parseRanges (Ljava/lang/String;Z)Ljava/util/List;
	public static synthetic fun parseRanges$default (Lmisk/web/mediatype/MediaRange$Companion;Ljava/lang/String;ZILjava/lang/Object;)Ljava/util/List;
}

public final class misk/web/mediatype/MediaRange$Matcher : java/lang/Comparable {
	public fun <init> (Lmisk/web/mediatype/MediaRange;)V
	public fun <init> (Lmisk/web/mediatype/MediaRange;Z)V
	public synthetic fun <init> (Lmisk/web/mediatype/MediaRange;ZILkotlin/jvm/internal/DefaultConstructorMarker;)V
	public synthetic fun compareTo (Ljava/lang/Object;)I
	public fun compareTo (Lmisk/web/mediatype/MediaRange$Matcher;)I
	public final fun getMatchesCharset ()Z
	public final fun getMediaRange ()Lmisk/web/mediatype/MediaRange;
	public fun toString ()Ljava/lang/String;
}

public final class misk/web/mediatype/MediaTypes {
	public static final field ALL Ljava/lang/String;
	public static final field APPLICATION_FORM_URLENCODED Ljava/lang/String;
	public static final field APPLICATION_GRPC Ljava/lang/String;
	public static final field APPLICATION_JAVASCRIPT Ljava/lang/String;
	public static final field APPLICATION_JSON Ljava/lang/String;
	public static final field APPLICATION_OCTETSTREAM Ljava/lang/String;
	public static final field APPLICATION_PROTOBUF Ljava/lang/String;
	public static final field IMAGE_PNG Ljava/lang/String;
	public static final field IMAGE_SVG Ljava/lang/String;
	public static final field INSTANCE Lmisk/web/mediatype/MediaTypes;
	public static final field TEXT_CSS Ljava/lang/String;
	public static final field TEXT_HTML Ljava/lang/String;
	public static final field TEXT_PLAIN_UTF8 Ljava/lang/String;
	public static final field TURBO_STREAM Ljava/lang/String;
	public final fun fromFileExtension (Ljava/lang/String;)Lokhttp3/MediaType;
	public final fun getALL_MEDIA_TYPE ()Lokhttp3/MediaType;
	public final fun getAPPLICATION_GRPC_MEDIA_TYPE ()Lokhttp3/MediaType;
	public final fun getAPPLICATION_JAVASCRIPT_MEDIA_TYPE ()Lokhttp3/MediaType;
	public final fun getAPPLICATION_JSON_MEDIA_TYPE ()Lokhttp3/MediaType;
	public final fun getAPPLICATION_OCTETSTREAM_MEDIA_TYPE ()Lokhttp3/MediaType;
	public final fun getAPPLICATION_PROTOBUF_MEDIA_TYPE ()Lokhttp3/MediaType;
	public final fun getIMAGE_PNG_MEDIA_TYPE ()Lokhttp3/MediaType;
	public final fun getIMAGE_SVG_MEDIA_TYPE ()Lokhttp3/MediaType;
	public final fun getTEXT_CSS_MEDIA_TYPE ()Lokhttp3/MediaType;
	public final fun getTEXT_HTML_MEDIA_TYPE ()Lokhttp3/MediaType;
	public final fun getTEXT_PLAIN_UTF8_MEDIA_TYPE ()Lokhttp3/MediaType;
	public final fun getTURBO_STREAM_MEDIA_TYPE ()Lokhttp3/MediaType;
}

public final class misk/web/mediatype/MediaTypesKt {
	public static final fun asMediaRange (Ljava/lang/String;)Lmisk/web/mediatype/MediaRange;
	public static final fun asMediaType (Ljava/lang/String;)Lokhttp3/MediaType;
	public static final fun compareTo (Lokhttp3/MediaType;Lokhttp3/MediaType;)I
}

